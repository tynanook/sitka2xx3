
import tset tset576x,tset576;
vector        ( $tset, MCLR_nRESET, UART_CTS, UART_RTS, UART_RX, UART_TX)
{
start_label start_uart_id:
				> tset576x  1     0	X	1	X   	; //tset576x runs 10x faster than tset576
 				> tset576x  1     0	X	1	X   	; //

				> tset576x  1     0 	X	1	X      	; //
repeat 1000
				> tset576x  1     0 	X	1	X      	; //  send 'sys reset\r\n'
				
				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	1	X	; // 's' lsb
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	0	X	; // 's' 
				> tset576   1     0	X	0	X	; // 's' 
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	0	X	; // 's' msb x73
				> tset576   1     0	X	1	X	; // Stop Bit = 1				
				
				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	1	X	; // 'y' lsb
				> tset576   1     0	X	0	X	; // 'y' 
				> tset576   1     0	X	0	X	; // 'y' 
				> tset576   1     0	X	1	X	; // 'y' 
				> tset576   1     0	X	1	X	; // 'y' 
				> tset576   1     0	X	1	X	; // 'y' 
				> tset576   1     0	X	1	X	; // 'y' 
				> tset576   1     0	X	0	X	; // 'y' msb x79
				> tset576   1     0	X	1	X	; // Stop Bit = 1				
				
				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	1	X	; // 's' lsb
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	0	X	; // 's' 
				> tset576   1     0	X	0	X	; // 's' 
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	0	X	; // 's' msb x73
				> tset576   1     0	X	1	X	; // Stop Bit = 1				
				
				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	0	X	; // space lsb
				> tset576   1     0	X	0	X	; // space 
				> tset576   1     0	X	0	X	; // space 
				> tset576   1     0	X	0	X	; // space 
				> tset576   1     0	X	0	X	; // space 
				> tset576   1     0	X	1	X	; // space 
				> tset576   1     0	X	0	X	; // space 
				> tset576   1     0	X	0	X	; // space msb x20
				> tset576   1     0	X	1	X	; // Stop Bit = 1				

				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	0	X	; // 'r' lsb
				> tset576   1     0	X	1	X	; // 'r' 
				> tset576   1     0	X	0	X	; // 'r' 
				> tset576   1     0	X	0	X	; // 'r' 
				> tset576   1     0	X	1	X	; // 'r' 
				> tset576   1     0	X	1	X	; // 'r' 
				> tset576   1     0	X	1	X	; // 'r' 
				> tset576   1     0	X	0	X	; // 'r' msb x72
				> tset576   1     0	X	1	X	; // Stop Bit = 1

				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	1	X	; // 'e' lsb
				> tset576   1     0	X	0	X	; // 'e' 
				> tset576   1     0	X	1	X	; // 'e' 
				> tset576   1     0	X	0	X	; // 'e' 
				> tset576   1     0	X	0	X	; // 'e' 
				> tset576   1     0	X	1	X	; // 'e' 
				> tset576   1     0	X	1	X	; // 'e' 
				> tset576   1     0	X	0	X	; // 'e' msb x65
				> tset576   1     0	X	1	X	; // Stop Bit = 1

				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	1	X	; // 's' lsb
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	0	X	; // 's' 
				> tset576   1     0	X	0	X	; // 's' 
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	1	X	; // 's' 
				> tset576   1     0	X	0	X	; // 's' msb x73
				> tset576   1     0	X	1	X	; // Stop Bit = 1

				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	1	X	; // 'e' lsb
				> tset576   1     0	X	0	X	; // 'e' 
				> tset576   1     0	X	1	X	; // 'e' 
				> tset576   1     0	X	0	X	; // 'e' 
				> tset576   1     0	X	0	X	; // 'e' 
				> tset576   1     0	X	1	X	; // 'e' 
				> tset576   1     0	X	1	X	; // 'e' 
				> tset576   1     0	X	0	X	; // 'e' msb x65
				> tset576   1     0	X	1	X	; // Stop Bit = 1

				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	1	X	; // 't' lsb
				> tset576   1     0	X	1	X	; // 't' 
				> tset576   1     0	X	0	X	; // 't' 
				> tset576   1     0	X	0	X	; // 't' 
				> tset576   1     0	X	1	X	; // 't' 
				> tset576   1     0	X	1	X	; // 't' 
				> tset576   1     0	X	1	X	; // 't' 
				> tset576   1     0	X	0	X	; // 't' msb x73
				> tset576   1     0	X	1	X	; // Stop Bit = 1		
				
				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	1	X	; // CR lsb
				> tset576   1     0	X	0	X	; // CR 
				> tset576   1     0	X	1	X	; // CR 
				> tset576   1     0	X	1	X	; // CR 
				> tset576   1     0	X	0	X	; // CR 
				> tset576   1     0	X	0	X	; // CR 
				> tset576   1     0	X	0	X	; // CR 
				> tset576   1     0	X	0	X	; // CR msb x0D
				> tset576   1     0	X	1	X	; // Stop Bit = 1					
				
				> tset576   1     0	X	0	X	; // Start Bit = 0
				> tset576   1     0	X	1	X	; // LF lsb
				> tset576   1     0	X	0	X	; // LF 
				> tset576   1     0	X	1	X	; // LF 
				> tset576   1     0	X	1	X	; // LF 
				> tset576   1     0	X	0	X	; // LF 
				> tset576   1     0	X	0	X	; // LF 
				> tset576   1     0	X	0	X	; // LF 
				> tset576   1     0	X	0	X	; // LF msb x0D
				> tset576   1     0	X	1	X	; // Stop Bit = 1				
				
repeat 2304			
				> tset576  1     0 	X	1	X      	; // delay 40ms
				
				
repeat 30,ign		
				> tset576x  1     0     X	1	X	; //force fail, match HHL				


set_loopA 10000, ign   
              			> tset576x  1     0 	X	1	H       ; //first H
m_loop: ign
             		 	> tset576x  1     0 	X	1	H       ; //second H

if (pass) jump goahead, ign    	 
				> tset576x  1     0 	X	1	L       ; // Start Bit L about 4msec later

if (fail) jump x_loop, ign, clr_fail, clr_cond	
				> tset576x  1     0 	X	1	H       ; //first H

x_loop:	end_loopA m_loop, ign
				> tset576x  1     0 	X	1	H       ; //second H			
timeout:	halt								
				> tset576   1     0	X	1	X	; // don't care	
				
goahead:	pop_loop
				> tset576x  1     1	X	1	X       ; // still in Start Bit
				> tset576x  1     1	X	1	X	; // adjust for best timing fit
				> tset576x  1     1	X	1	X	; // adjust for best timing fit
				> tset576x  1     1	X	1	X	; // adjust for best timing fit
				> tset576x  1     1	X	1	X	; // adjust for best timing fit
				> tset576x  1     1	X	1	X	; // adjust for best timing fit
				> tset576x  1     1	X	1	X	; // adjust for best timing fit
				> tset576x  1     1	X	1	X	; // adjust for best timing fit
				> tset576   1     0	X	1	L	; // 'R' lsb, ID = 'RN2483'
				> tset576   1     0	X	1	H	; // 'R' 
				> tset576   1     0	X	1	L	; // 'R' 
				> tset576   1     0	X	1	L	; // 'R' 
				> tset576   1     0	X	1	H	; // 'R' 
				> tset576   1     0	X	1	L	; // 'R' 
				> tset576   1     0	X	1	H	; // 'R' 
				> tset576   1     0	X	1	L	; // 'R' msb x52
				> tset576   1     0	X	1	H	; // Stop Bit = H
				> tset576   1     0	X	1	L	; // Start Bit = L
				> tset576   1     0	X	1	L	; // 'N' lsb
				> tset576   1     0	X	1	H	; // 'N' 
				> tset576   1     0	X	1	H	; // 'N' 
				> tset576   1     0	X	1	H	; // 'N' 
				> tset576   1     0	X	1	L	; // 'N' 
				> tset576   1     0	X	1	L	; // 'N' 
				> tset576   1     0	X	1	H	; // 'N' 
				> tset576   1     0	X	1	L	; // 'N' msb x4E
				> tset576   1     0	X	1	H	; // Stop Bit = H
				> tset576   1     0	X	1	L	; // Start Bit = L				
				> tset576   1     0	X	1	L	; // '2' lsb
				> tset576   1     0	X	1	H	; // '2' 
				> tset576   1     0	X	1	L	; // '2' 
				> tset576   1     0	X	1	L	; // '2' 
				> tset576   1     0	X	1	H	; // '2' 
				> tset576   1     0	X	1	H	; // '2' 
				> tset576   1     0	X	1	L	; // '2' 
				> tset576   1     0	X	1	L	; // '2' msb x32
				> tset576   1     0	X	1	H	; // Stop Bit = H
				> tset576   1     0	X	1	L	; // Start Bit = L				
				> tset576   1     0	X	1	L	; // '4' lsb
				> tset576   1     0	X	1	L	; // '4' 
				> tset576   1     0	X	1	H	; // '4' 
				> tset576   1     0	X	1	L	; // '4' 
				> tset576   1     0	X	1	H	; // '4' 
				> tset576   1     0	X	1	H	; // '4' 
				> tset576   1     0	X	1	L	; // '4' 
				> tset576   1     0	X	1	L	; // '4' msb x34
				> tset576   1     0	X	1	H	; // Stop Bit = H
				> tset576   1     0	X	1	L	; // Start Bit = L				
				> tset576   1     0	X	1	L	; // '8' lsb
				> tset576   1     0	X	1	L	; // '8' 
				> tset576   1     0	X	1	L	; // '8' 
				> tset576   1     0	X	1	H	; // '8' 
				> tset576   1     0	X	1	H	; // '8' 
				> tset576   1     0	X	1	H	; // '8' 
				> tset576   1     0	X	1	L	; // '8' 
				> tset576   1     0	X	1	L	; // '8' msb x38
				> tset576   1     0	X	1	H	; // Stop Bit = H
				> tset576   1     0	X	1	L	; // Start Bit = L				
				> tset576   1     0	X	1	H	; // '3' lsb
				> tset576   1     0	X	1	H	; // '3' 
				> tset576   1     0	X	1	L	; // '3' 
				> tset576   1     0	X	1	L	; // '3' 
				> tset576   1     0	X	1	H	; // '3' 
				> tset576   1     0	X	1	H	; // '3' 
				> tset576   1     0	X	1	L	; // '3' 
				> tset576   1     0	X	1	L	; // '3' msb x33
				> tset576   1     0	X	1	H	; // Stop Bit = H
repeat 100
				> tset576   1     0	X	1	X	; // clear pipeline														
halt
				> tset576   1     0  	X	1	X       ; //ignore rest of id
}

